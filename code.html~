<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<title>code</title>
<!-- 2017-01-11 Wed 09:29 -->
<meta  http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta  name="generator" content="Org-mode" />
<meta  name="author" content="Gaurish" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center; }
  .todo   { font-family: monospace; color: red; }
  .done   { color: green; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  pre.src-sh:before    { content: 'sh'; }
  pre.src-bash:before  { content: 'sh'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-R:before     { content: 'R'; }
  pre.src-perl:before  { content: 'Perl'; }
  pre.src-java:before  { content: 'Java'; }
  pre.src-sql:before   { content: 'SQL'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.right  { text-align: center;  }
  th.left   { text-align: center;   }
  th.center { text-align: center; }
  td.right  { text-align: right;  }
  td.left   { text-align: left;   }
  td.center { text-align: center; }
  dt { font-weight: bold; }
  .footpara:nth-child(2) { display: inline; }
  .footpara { display: block; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  /*]]>*/-->
</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
<script type="text/javascript" src="http://orgmode.org/mathjax/MathJax.js"></script>
<script type="text/javascript">
<!--/*--><![CDATA[/*><!--*/
    MathJax.Hub.Config({
        // Only one of the two following lines, depending on user settings
        // First allows browser-native MathML display, second forces HTML/CSS
        //  config: ["MMLorHTML.js"], jax: ["input/TeX"],
            jax: ["input/TeX", "output/HTML-CSS"],
        extensions: ["tex2jax.js","TeX/AMSmath.js","TeX/AMSsymbols.js",
                     "TeX/noUndefined.js"],
        tex2jax: {
            inlineMath: [ ["\\(","\\)"] ],
            displayMath: [ ['$$','$$'], ["\\[","\\]"], ["\\begin{displaymath}","\\end{displaymath}"] ],
            skipTags: ["script","noscript","style","textarea","pre","code"],
            ignoreClass: "tex2jax_ignore",
            processEscapes: false,
            processEnvironments: true,
            preview: "TeX"
        },
        showProcessingMessages: true,
        displayAlign: "center",
        displayIndent: "2em",

        "HTML-CSS": {
             scale: 100,
             availableFonts: ["STIX","TeX"],
             preferredFont: "TeX",
             webFont: "TeX",
             imageFont: "TeX",
             showMathMenu: true,
        },
        MMLorHTML: {
             prefer: {
                 MSIE:    "MML",
                 Firefox: "MML",
                 Opera:   "HTML",
                 other:   "HTML"
             }
        }
    });
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">code</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Preamble</a></li>
<li><a href="#sec-2">2. 2-APX Static  \(r\)-Gather</a>
<ul>
<li><a href="#sec-2-1">2.1. Metric Space algo .</a>
<ul>
<li><a href="#sec-2-1-1">2.1.1. Generate Clusters</a></li>
</ul>
</li>
<li><a href="#sec-2-2">2.2. R2L2 instantiation .</a></li>
</ul>
</li>
<li><a href="#sec-3">3. 4-APX Static \(r\)-Gather</a>
<ul>
<li><a href="#sec-3-1">3.1. Metric space algo .</a>
<ul>
<li><a href="#sec-3-1-1">3.1.1. Generate Clusters: The Simple Version</a></li>
<li><a href="#sec-3-1-2">3.1.2. Generate Clusters: The Sweep Version</a></li>
<li><a href="#sec-3-1-3">3.1.3. Maximal Independent Set  // Unique Extraction From List</a></li>
</ul>
</li>
<li><a href="#sec-3-2">3.2. R2L2 instantiation .</a>
<ul>
<li><a href="#sec-3-2-1">3.2.1. Setup and Cleanup</a></li>
<li><a href="#sec-3-2-2">3.2.2. Plot Clusters</a></li>
<li><a href="#sec-3-2-3">3.2.3. Plot Statistics</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-4">4. 2-APX Dynamic \(r\)-Gather</a></li>
<li><a href="#sec-5">5. 4-APX Dynamic \(r\)-Gather</a></li>
</ul>
</div>
</div>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Preamble</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">!/usr/bin/python</span>
<span style="color: #0000FF;">import</span> matplotlib <span style="color: #0000FF;">as</span> mpl 
<span style="color: #0000FF;">from</span> matplotlib <span style="color: #0000FF;">import</span> pyplot <span style="color: #0000FF;">as</span> plt, animation 
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #0000FF;">import</span> scipy <span style="color: #0000FF;">as</span> sp
<span style="color: #0000FF;">from</span> scipy <span style="color: #0000FF;">import</span> spatial
<span style="color: #0000FF;">import</span> sys
<span style="color: #0000FF;">import</span> math
<span style="color: #0000FF;">import</span> networkx <span style="color: #0000FF;">as</span> nx, sklearn <span style="color: #0000FF;">as</span> sk
<span style="color: #0000FF;">from</span> abc <span style="color: #0000FF;">import</span> ABCMeta, abstractmethod
<span style="color: #0000FF;">import</span> colorsys 
<span style="color: #0000FF;">from</span> termcolor <span style="color: #0000FF;">import</span> colored
<span style="color: #0000FF;">import</span> itertools
<span style="color: #0000FF;">import</span> pprint <span style="color: #0000FF;">as</span> pp
<span style="color: #0000FF;">import</span> copy
<span style="color: #0000FF;">import</span> yaml
<span style="color: #0000FF;">from</span> sklearn.neighbors <span style="color: #0000FF;">import</span> NearestNeighbors

<span style="color: #0000FF;">def</span> <span style="color: #006699;">getRandomColor</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">""" Ripped from http://goo.gl/SMlEaU"""</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">h</span> = np.random.rand() 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">h</span> +=  0.618033988749895 <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">golden_ratio_conjugate</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">h</span> %= 1.0
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> colorsys.hsv_to_rgb(h, 0.7, 0.9)

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Here we use the 2-approximation algorithm for general metric spaces </span>
<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">described in the aggarwal paper on r-Gather.</span>
&lt;&lt;2APX_METRIC&gt;&gt;   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Abstract class</span>
&lt;&lt;STATIC_2APX_R2_L2&gt;&gt;    <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">For static points in the euclidean plane with the L2 metric</span>
&lt;&lt;DYNAMIC_2APX_R2_LINF&gt;&gt; <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">For trajectories in the euclidean plane with the linifinity-like metric </span>

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">The abstract class has both versions of the 4-approximation</span>
<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">algorithm i.e. the simple one and the improved distributed sweep </span>
<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">algorithm described by Prof. Mitchell.</span>
&lt;&lt;4APX_METRIC&gt;&gt;   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Abstract class</span>
&lt;&lt;STATIC_4APX_R2_L2&gt;&gt;    <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">For points in the euclidean plane with the L2 metric</span>
&lt;&lt;DYNAMIC_4APX_R2_LINF&gt;&gt; <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">for trajectories in the euclidean plane with the linifinity-like metric</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 2-APX Static  \(r\)-Gather</h2>
<div class="outline-text-2" id="text-2">
<p>
Since the algorithm can work for any metric space, I'll implement it as an abstract 
base class called <b><code>AlgoAggarwalStatic</code></b>. For a specific metric-space, it will run as a 
method in a subclass of this ABC. This sub-class will implement the distance 
function and other visualization routines and possibly faster neighbour search routines
than the default one provided in the base class viz. that of the brute force quadratic
search. You might even want to consider making this neighbour search an abstract method 
when dealing with trajectory data. 
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Metric Space algo .</h3>
<div class="outline-text-3" id="text-2-1">
<p>
The following code block are birds-eye views of <b><code>AlgoAggarwalStatic</code></b> and <b><code>AlgoAggarwalR2L2</code></b>. 
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">class</span> <span style="color: #6434A3;">AlgoAggarwalStatic</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">__metaclass__</span> = ABCMeta

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">def</span> <span style="color: #006699;">__init__</span>(<span style="color: #0000FF;">self</span>,r,pointCloud):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">""" Even though this is an abstract class, a subclass is </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       allowed to call the constructor via super. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       However, a user cannot instantiate a class with this </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       method from his code."""</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">pass</span> 


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #6434A3;">@abstractmethod</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">def</span> <span style="color: #006699;">dist</span>(p,q):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">""" A distance function of a metric space.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       distance between points p and q. Implemented </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       by the subclass. """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">pass</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #6434A3;">@abstractmethod</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">def</span> <span style="color: #006699;">rangeSearch</span>( pointCloud, radius):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">""" Given a set of points in the metric space, and a radius value</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       find all the neighbours for a point in 'pointCloud' in a ball of radius, </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       'radius', for all points in 'points'. Depending on the metric space </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       an efficient neighbour search routine will use different tricks """</span> 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">pass</span> 

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> &lt;&lt;GENERATE_CLUSTERS_AGGARWAL&gt;&gt;
</pre>
</div>

<p>
To generate neighbor relations for the dynamic-case, since I don't have a good neighbor search routine for arbitrary metric spaces. 
I do this via the <code>getNeighbors/.py</code> code in the DynamicInput folder
</p>
</div>
<div id="outline-container-sec-2-1-1" class="outline-4">
<h4 id="sec-2-1-1"><span class="section-number-4">2.1.1</span> Generate Clusters</h4>
<div class="outline-text-4" id="text-2-1-1">
<p>
<code>&lt;&lt;GENERATE_CLUSTERS_AGGARWAL&gt;&gt;</code> expands to the <b><code>generateClusters</code></b> method which implements the actual algorithm.  
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">generateClusters</span>(<span style="color: #0000FF;">self</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">from</span>   colorama <span style="color: #0000FF;">import</span> Fore, Style 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">import</span> pprint <span style="color: #0000FF;">as</span> pp 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">import</span> networkx <span style="color: #0000FF;">as</span> nx, numpy <span style="color: #0000FF;">as</span> np, random, time 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">points</span>    = <span style="color: #0000FF;">self</span>.pointCloud <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">a conveninent alias </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">numPoints</span> = <span style="color: #006FE0;">len</span>( <span style="color: #0000FF;">self</span>.pointCloud )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> &lt;&lt;FIRST_CONDITION_PREDICATE&gt;&gt;
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> &lt;&lt;MAKE_CLUSTER_CENTERS&gt;&gt; <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">There are two such assumptions. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> &lt;&lt;MAKE_FLOW_NETWORK&gt;&gt;
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> &lt;&lt;MAKE_AGGARWAL_CLUSTERS&gt;&gt;

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> <span style="color: #008000;">"Started filtering!"</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "The points are ", points   </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Number of points are", numPoints</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">import sys</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">sys.exit()</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">dijHalfs</span> = [0.5 * <span style="color: #0000FF;">self</span>.dist( points[ i ], points[ j ] ) 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>( numPoints ) 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> j <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>( i+1, numPoints ) ]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Find all dijs satisfying condition 1 on page 4</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> <span style="color: #008000;">"dijhalfs computed"</span>, <span style="color: #006FE0;">len</span>(dijHalfs)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">dijHalfsFiltered</span> =  <span style="color: #006FE0;">filter</span>( firstConditionPredicate, dijHalfs )  <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">smallest to highest</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> <span style="color: #008000;">"dijHalfsFiltered done!"</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">'FOR' Loop to find the minimum 'R' from these filtered dijs satisfying </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#  </span><span style="color: #8D8D84; font-style: italic;">condition 2 on page 4 of the paper. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">bestR</span>, <span style="color: #BA36A5;">bestRflowNetwork</span>, <span style="color: #BA36A5;">bestRflowDict</span> = <span style="color: #006FE0;">float</span>( <span style="color: #008000;">'inf'</span> ), nx.DiGraph(), {} 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">bestRCenters</span> = []

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">from</span> termcolor <span style="color: #0000FF;">import</span> colored

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">for</span> R <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">sorted</span>(dijHalfsFiltered) : <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">The first R that goes through the else block is the required R</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> colored(<span style="color: #006FE0;">str</span>(R) + <span style="color: #008000;">'is being tested'</span>, <span style="color: #008000;">'red'</span>, <span style="color: #008000;">'on_white'</span>, [<span style="color: #008000;">'underline'</span>, <span style="color: #008000;">'bold'</span>])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">clusterCenters</span> = makeClusterCenters( R )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">flowNetwork</span>    = makeFlowNetwork( R, clusterCenters )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">try</span>: <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Check if a feasible flow exists in the constructed network.  </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">flowDict</span> = nx.min_cost_flow( flowNetwork )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">except</span> nx.NetworkXUnfeasible:<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">If not, try the next R</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> Fore.RED, <span style="color: #008000;">"Unfeasible R detected: R= "</span>, R, Style.RESET_ALL
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">continue</span> 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>: <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Found a feasible R.  </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">print</span> <span style="color: #008000;">"Found an feasible R! R= "</span>, R
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">print</span> Fore.RED, <span style="color: #008000;">" In fact, it is the best thus far "</span>, Style.RESET_ALL 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">bestR</span>            = R
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">bestRflowNetwork</span> = flowNetwork
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">bestRflowDict</span>    = flowDict
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">bestRCenters</span>     = clusterCenters
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">break</span> 

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">Use the best network to construct the needed clusters. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.computedClusterings = makeClusters( bestRflowDict, bestRCenters, bestRflowNetwork, bestR)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">====================================================================================================</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> &lt;&lt;RECURSE_BLOCK&gt;&gt;

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">=====================================================================================================</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Sanity check on the computed clusters. They should all be of size r and should cover the full point set</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">assert</span>( <span style="color: #006FE0;">all</span>( [ <span style="color: #006FE0;">len</span>(cluster) &gt;= <span style="color: #0000FF;">self</span>.r <span style="color: #0000FF;">for</span> cluster <span style="color: #0000FF;">in</span> <span style="color: #0000FF;">self</span>.computedClusterings ] ) )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">assert</span>( <span style="color: #006FE0;">len</span>( { i <span style="color: #0000FF;">for</span> cluster <span style="color: #0000FF;">in</span> <span style="color: #0000FF;">self</span>.computedClusterings <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> cluster } ) == numPoints   )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> Fore.YELLOW, <span style="color: #008000;">"Yay All points Covered!!"</span>, Style.RESET_ALL

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> <span style="color: #008000;">"BestRCenters are "</span>, bestRCenters 

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Print the clusters along with their sizes</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> colored(<span style="color: #006FE0;">str</span>(<span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.computedClusterings)) + <span style="color: #008000;">' clusters have been computed on '</span> + \
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #006FE0;">str</span>(<span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.pointCloud)) + <span style="color: #008000;">' elements'</span> , <span style="color: #008000;">'magenta'</span>,  attrs=[<span style="color: #008000;">'bold'</span>, <span style="color: #008000;">'underline'</span>] )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">for</span> i, cluster <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">enumerate</span>(<span style="color: #0000FF;">self</span>.computedClusterings):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">print</span> <span style="color: #008000;">"Cluster("</span>, i+1, <span style="color: #008000;">") Size:"</span>, <span style="color: #006FE0;">len</span>(cluster), <span style="color: #008000;">"  "</span>, np.array( cluster ) 


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #006FE0;">raw_input</span>(<span style="color: #008000;">'Press Enter to continue...'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">return</span>  bestRCenters
</pre>
</div>

<p>
The following adds recursive capabilities to the routine so that the cluster size, in terms of number, goes down. 
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Check if all clusters are small enough. i.e. don't have too many points. </span>
<span style="color: #BA36A5;">largeclusters</span> = [cluster <span style="color: #0000FF;">for</span> cluster <span style="color: #0000FF;">in</span> <span style="color: #0000FF;">self</span>.computedClusterings 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">if</span> <span style="color: #006FE0;">len</span>(cluster) &gt;= 2*<span style="color: #0000FF;">self</span>.r <span style="color: #0000FF;">and</span> 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #006FE0;">len</span>(cluster) &lt; <span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.pointCloud)]


<span style="color: #0000FF;">if</span> largeclusters: <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">A non-empty list evaluates to True. The Pythonic way.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Iterate through each cluster and run the r-Gather algorithm on it. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">for</span> cluster <span style="color: #0000FF;">in</span> largeclusters:

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">cluster_size</span> = <span style="color: #006FE0;">len</span>(cluster)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">if</span> cluster_size &gt;= 2*<span style="color: #0000FF;">self</span>.r <span style="color: #0000FF;">and</span> cluster_size != <span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.pointCloud):

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #BA36A5;">cluster_pointCloud</span> = [<span style="color: #0000FF;">self</span>.pointCloud[i]  <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> cluster]                 

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #BA36A5;">run</span> = AlgoJieminDynamic(r= <span style="color: #0000FF;">self</span>.r, pointCloud= cluster_pointCloud, memoizeNbrSearch= <span style="color: #D0372D;">True</span>) 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #BA36A5;">clusterCenters</span> = run.generateClusters() 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">print</span> clusterCenters
</pre>
</div>
<p>
The noweb-reference makeClusterCenters expands to the function definition given below. Neighbours of a point within
the distance \(2R\) are chosen naively simply by iterating over the point cloud. I don't know how to do subquadratic 
time neighbour searches in general metric spaces. 
</p>

<p>
<i><b>NOTE</b> :: It is not immediately clear why the <code>while</code> loop below <b>must</b> terminate. Aggarwal et al.  do not prove this statement.  Possible 
 issue to be raised with Prof. Gao and Rik? But I suppose it might work for low values&#x2026;.\(r = 2,3\)&#x2026;Not sure.Will need to check this out properly.</i>
<i>Possible hacks: if the loop looks like it is infinite, terminate it, and figure out how to treat these points.</i>
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">makeClusterCenters</span>( R,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       points = <span style="color: #0000FF;">self</span>.pointCloud, 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       dist   = <span style="color: #0000FF;">self</span>.dist      , 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       r      = <span style="color: #0000FF;">self</span>.r         ):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #008000;">""" Marking loop for choosing good cluster centers """</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">numPoints</span>               = <span style="color: #006FE0;">len</span>( points )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">markers</span>                 = [ <span style="color: #D0372D;">False</span> <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>( numPoints ) ]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">potentialClusterCenters</span> = [ ] <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Populated in the while loop below.  </span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Warning: The n_neighbors=r was chosen by me arbitrarily. Without this, the default parameter chosen by sklearn is 5</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Might have to do replace this with something else in the future me thinks.  </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">nbrs_datastructure = NearestNeighbors (n_neighbors=r, radius=2*R , algorithm='ball_tree',metric=self.dist , n_jobs=-1).fit( points ) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">See note above. It might be very important! </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">The following while loop replacement to the confusing tangle spelled out in the Aggarwal </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">paper was suggested by Jie and Jiemin in the email thread with Rik, after I cried for help. </span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">First get all the points within distance 2*R for EVERY point in the cloud.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     (_, idx_nbrs_2R) = <span style="color: #0000FF;">self</span>.rangeSearch( points, 2.0*R )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">while</span>( <span style="color: #006FE0;">all</span>( markers ) !=  <span style="color: #D0372D;">True</span> ): 

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">unmarkedIndices</span> =  [ index <span style="color: #0000FF;">for</span> ( index,boolean ) 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">zip</span>( <span style="color: #006FE0;">range</span>( numPoints ), markers) 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">if</span> boolean == <span style="color: #D0372D;">False</span> ]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">randomIndex</span>          = random.choice ( unmarkedIndices ) 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">ball2R_neighbor_list</span> = idx_nbrs_2R[randomIndex]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print ball2R_neighbor_list </span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Mark all the neighbours including the point itself. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">for</span> nbrIndex <span style="color: #0000FF;">in</span> ball2R_neighbor_list:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #BA36A5;">markers</span>[ nbrIndex ] = <span style="color: #D0372D;">True</span> 

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> potentialClusterCenters.append( ( randomIndex, ball2R_neighbor_list ) ) 


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">print</span> <span style="color: #008000;">" All points marked! "</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Cluster centers are those which have atleast r points in their neighbourhood. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">clusterCenters</span> = [ index <span style="color: #0000FF;">for</span> ( index, ball2R_neighbor_list ) <span style="color: #0000FF;">in</span> potentialClusterCenters 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">if</span> <span style="color: #006FE0;">len</span>( ball2R_neighbor_list ) &gt;= r  ]


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Having marked all the points, return the cluster centers. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">return</span> clusterCenters
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> R2L2 instantiation .</h3>
<div class="outline-text-3" id="text-2-2">
<p>
The following concrete class inheriting from <b><code>AlgoAggarwalStatic</code></b> is implemented for the \(L^2\) metric in \(\mathbb{R}^2\).
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">class</span> <span style="color: #6434A3;">AlgoAggarwalStaticR2L2</span>( AlgoAggarwalStatic ):

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">__init__</span>(<span style="color: #0000FF;">self</span>, r, pointCloud):

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">self</span>.r                    = r     
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">self</span>.pointCloud           = pointCloud 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">self</span>.computedClusterings  = []  
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">self</span>.algoName             = <span style="color: #008000;">'Metric Space Static r-Gather applied to R2L2'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">super(  AlgoAggarwalStaticR2L2, self ).__init__( self.r, self.pointCloud  )</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">clearAllStates</span>(<span style="color: #0000FF;">self</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">self</span>.r                   = <span style="color: #D0372D;">None</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">self</span>.pointCloud          = [] 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">self</span>.computedClusterings = []

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">clearComputedClusteringsAndR</span>(<span style="color: #0000FF;">self</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">self</span>.r                   = <span style="color: #D0372D;">None</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">self</span>.computedClusterings = []

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">dist</span>(<span style="color: #0000FF;">self</span>, p,q):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #008000;">""" Euclidean distance between points p and q in R^2 """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">return</span> np.linalg.norm( [ p[0]-q[0] , 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      p[1]-q[1] ]  )


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">findNearestNeighbours</span>(<span style="color: #0000FF;">self</span>,pointCloud, k):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #008000;">"""  pointCloud : 2-d numpy array. Each row is a point</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">     k          : The length of the neighbour list to compute. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">     """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">from</span> sklearn.neighbors <span style="color: #0000FF;">import</span> NearestNeighbors

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">X</span>    = np.array(pointCloud)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">nbrs</span> = NearestNeighbors(n_neighbors=k, algorithm=<span style="color: #008000;">'ball_tree'</span>).fit(X)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">distances</span>, <span style="color: #BA36A5;">indices</span> = nbrs.kneighbors(X)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">return</span> distances, indices


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">rangeSearch</span>(<span style="color: #0000FF;">self</span>, pointCloud, radius):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #008000;">""" A wrapper for a good neighbour search routine provided by Scipy.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> Given a point-cloud, return the neighbours within a distance of 'radius'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> for every element of the pointcloud. return the neighbour indices , sorted </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> according to distance. """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">from</span> scipy <span style="color: #0000FF;">import</span> spatial

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">X</span>        = np.array( pointCloud )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">mykdtree</span> = spatial.KDTree( X )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">nbrlists</span> = <span style="color: #006FE0;">list</span>( mykdtree.query_ball_point( X, radius) )


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">distances</span> = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">for</span> index  <span style="color: #0000FF;">in</span>  <span style="color: #006FE0;">range</span>(<span style="color: #006FE0;">len</span>(nbrlists)):

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">def</span> <span style="color: #006699;">fn_index</span>( i ): <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Distance function local to this iteration of the loop</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">return np.linalg.norm(  [  X[i][0] - X[index][0]   , </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#                           </span><span style="color: #8D8D84; font-style: italic;">X[i][1] - X[index][1]    ]    )</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #0000FF;">self</span>.dist(X[i], X[index])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Replace the unsorted array with the sorted one. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #BA36A5;">nbrlists</span>[index]  = <span style="color: #006FE0;">sorted</span>( nbrlists[index], key = fn_index  ) 

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Get corresponding distances, which will now naturally be in sorted order. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>distances.append( <span style="color: #006FE0;">map</span>( fn_index, nbrlists[ index ] ) ) 


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">indices</span> = nbrlists <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Just a hack, too lazy to change nbrlists to the name indices above. </span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">return</span> distances, indices 


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  &lt;&lt;PLOT_CLUSTERS&gt;&gt;
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  &lt;&lt;PLOT_STATISTICS&gt;&gt;
</pre>
</div>

<p>
<b>IMPORTANT NOTE!</b>
The same exact methods for plotting the clusters and various other statistics from AlgoJieminDecentralizedDynamic
will apply here, so I'll just use a noweb-ref to insert them verbatim. In fact, they SHOULD be exactly the same 
for comparing AlgoJiemin and AlgoAggarwal. The noweb-references ensure we don't need to manually make the 
same changes in both classes. 
</p>
</div>
</div>
</div>



<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 4-APX Static \(r\)-Gather</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Metric space algo .</h3>
<div class="outline-text-3" id="text-3-1">
<p>
This algorithm is implemented as a class as described in the previous sections. Each instantiation is an "environment" in which the 
algorithm runs. To construct the class, we pass the cluster parameter \(r\) and the co-ordinates of the point-cloud. Some of the class 
variables stores various statistics gathered while executing the algorithm on the given point cloud.
</p>

<p>
First I give the algorithm which holds in arbitrary metric spaces. 
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">class</span> <span style="color: #6434A3;">Algo_4APX_Metric</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">__metaclass__</span> = ABCMeta

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">__init__</span>(<span style="color: #0000FF;">self</span>,r,pointCloud):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #008000;">""" Even though this is an abstract class, a subclass is </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> allowed to call the constructor via super. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> However, a user cannot instantiate a class with this </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> method from his code."""</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">pass</span> 

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #6434A3;">@abstractmethod</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">dist</span>(p,q):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #008000;">""" A distance function of a metric space.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> distance between points p and q. Implemented </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> by the subclass. """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">pass</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #6434A3;">@abstractmethod</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">rangeSearch</span>( pointCloud, radius):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #008000;">""" Given a set of points in the metric space, and a radius value</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> find all the neighbours for a point in 'pointCloud' in a ball of radius, </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> 'radius', for all points in 'points'. Depending on the metric space </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> an efficient neighbour search routine will use different tricks """</span> 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">pass</span> 

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   &lt;&lt;GENERATE_CLUSTERS_4APX_SIMPLE&gt;&gt;
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   &lt;&lt;GENERATE_CLUSTERS_4APX_SWEEP&gt;&gt;
</pre>
</div>
</div>


<div id="outline-container-sec-3-1-1" class="outline-4">
<h4 id="sec-3-1-1"><span class="section-number-4">3.1.1</span> Generate Clusters: The Simple Version</h4>
<div class="outline-text-4" id="text-3-1-1">
<p>
The algorithm. Finally! Note that this method is NOT called by the constructor when initializing 
the class. This is by design to gain extra flexibility during experimental analyses. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">generateClustersSimple</span>(<span style="color: #0000FF;">self</span>, config={<span style="color: #008000;">'mis_algorithm'</span>: <span style="color: #008000;">'networkx_random_choose_20_iter_best'</span>}):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">""" config : Configuration parameters which might be needed </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      for the run. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> Options recognized are (ALL LOWER-CASE)</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> 1. mis_algorithm:</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      A. 'networkx_random_choose_20_iter_best', default </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      B. 'riksuggestion'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">import</span> pprint <span style="color: #0000FF;">as</span> pp
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> &lt;&lt;FIND_MAXIMAL_INDEPENDENT_SET_NEIGHBOURHOODS&gt;&gt;
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> &lt;&lt;EXTRACT_UNIQUE_ELMENTS_FROM_LIST&gt;&gt;


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">NrDistances</span>, <span style="color: #BA36A5;">Nr</span> = <span style="color: #0000FF;">self</span>.findNearestNeighbours( <span style="color: #0000FF;">self</span>.pointCloud, <span style="color: #0000FF;">self</span>.r )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">Nr</span>              = np.array(Nr) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">if Nr is a list, convert to an np.array. Note that np.array function is idempotent.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">S</span>               = findMaximalIndependentOfNeighbourhoods( Nr.tolist( ), 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   config[ <span style="color: #008000;">'mis_algorithm'</span> ] )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">indicesOfPointsCoveredByS</span> = <span style="color: #006FE0;">set</span>(<span style="color: #006FE0;">list</span>(itertools.chain.from_iterable(S)))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">indicesOfPointsMissedByS</span>  = <span style="color: #006FE0;">set</span>(<span style="color: #006FE0;">range</span>(<span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.pointCloud))).difference(indicesOfPointsCoveredByS)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">assert</span>(indicesOfPointsCoveredByS.union(indicesOfPointsMissedByS ) == <span style="color: #006FE0;">set</span>(<span style="color: #006FE0;">range</span>(<span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.pointCloud))) )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">For each point missed by S, find which elements of its r-neighbourhood lies inside a member of S. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">pNrS</span> = {} <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">A dictionary which maintains this information.  </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">for</span> index <span style="color: #0000FF;">in</span> indicesOfPointsMissedByS:

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">pNrS</span>[index] = [] 

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">Coordinates of the point whose index is 'index'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">ptIndex</span>     = np.array( <span style="color: #0000FF;">self</span>.pointCloud[index] )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">neighborIndices</span> = Nr[index][1:] 

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">for</span> nbIndex <span style="color: #0000FF;">in</span> neighborIndices:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">for</span> s <span style="color: #0000FF;">in</span> S:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">if</span> nbIndex <span style="color: #0000FF;">in</span> s:

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">ptnbIndex</span> = np.array(<span style="color: #0000FF;">self</span>.pointCloud[nbIndex])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">dist</span> = <span style="color: #0000FF;">self</span>.dist(ptIndex , ptnbIndex) 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  pNrS[index].append(  (s, dist)    )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">break</span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">since members of S are disjoint there is no reason to continue to iterate over members of S to check containment of nbindex</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Move onto the next member of neighbourIndices. </span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">print "\nNr   = "     , Nr</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">print "\nS    = "     , S</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">print "\npointsMissed", indicesOfPointsMissedByS</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">print "\npNrS = "     ; pp.pprint(pNrS, width=20 )</span>


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Now for each point select the member of S that is closest using this dictionary. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Edit this dictionary in place, by keeping only the closest neighbourhood. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">pNrS_trimmed</span> = {}
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">for</span> (key, value) <span style="color: #0000FF;">in</span> pNrS.iteritems():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">distmin</span> = <span style="color: #006FE0;">float</span>(<span style="color: #008000;">"inf"</span>) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Positive infinity</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">for</span> (s, dist) <span style="color: #0000FF;">in</span> value:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">if</span> dist&lt;distmin:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">smin</span>    = s
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">distmin</span> = dist


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">pNrS_trimmed[key] = (smin,distmin) # For debugging purposes. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">pNrS_trimmed</span>[key] = smin

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "\npNrS_trimmed = "; pp.pprint(pNrS_trimmed, width=1) </span>



<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">With pNrS_trimmed we obtain the final clustering. Yay!</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">by "inverting" this key-value mapping</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">augmentedSets</span> = [s <span style="color: #0000FF;">for</span> s <span style="color: #0000FF;">in</span> S <span style="color: #0000FF;">if</span> s <span style="color: #0000FF;">not</span> <span style="color: #0000FF;">in</span> pNrS_trimmed.values()] <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">The sets just included are not augmented at all. </span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">pNrS_codomain</span> = extractUniqueElementsFromList(pNrS_trimmed.values())

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">for</span> s <span style="color: #0000FF;">in</span> pNrS_codomain:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">smodified</span> = copy.copy(s) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">This copying step is SUPER-CRUCIAL!!! if you just use =, you will just be binding object pointed to by s to smod. Modifying smod, will then modify s, which will trip up your future iterations! I initially implemented it like this and got tripped up </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> key, value <span style="color: #0000FF;">in</span> pNrS_trimmed.iteritems():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">if</span> s == value:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       smodified.append(key) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">augmentation step</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   augmentedSets.append(smodified)


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.computedClusterings = augmentedSets

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "\nself.computedClusterings = "; pp.pprint(self.computedClusterings,width=1)</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span>   <span style="color: #008000;">"Numpoints = "</span>                   , <span style="color: #006FE0;">len</span>( <span style="color: #0000FF;">self</span>.pointCloud )       ,  \
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">" r = "</span>                          , <span style="color: #0000FF;">self</span>.r                       ,  \
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">" Number of Clusters Computed = "</span>, <span style="color: #006FE0;">len</span>( <span style="color: #0000FF;">self</span>.computedClusterings ), \
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">" Algorithm used: "</span>              , <span style="color: #0000FF;">self</span>.algoName
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> sys.stdout.flush()
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-1-2" class="outline-4">
<h4 id="sec-3-1-2"><span class="section-number-4">3.1.2</span> Generate Clusters: The Sweep Version</h4>
<div class="outline-text-4" id="text-3-1-2">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">generateClustersSweep</span>(<span style="color: #0000FF;">self</span>, config={<span style="color: #008000;">'mis_algorithm'</span>: <span style="color: #008000;">'networkx_random_choose_20_iter_best'</span>}):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">""" config : Configuration parameters which might be needed </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      for the run. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> Options recognized are (ALL LOWER-CASE)</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> 1. mis_algorithm:</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      A. 'networkx_random_choose_20_iter_best', default </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      B. 'riksuggestion'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> &lt;&lt;FIND_MAXIMAL_INDEPENDENT_SET_NEIGHBOURHOODS&gt;&gt;
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> &lt;&lt;EXTRACT_UNIQUE_ELMENTS_FROM_LIST&gt;&gt;
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">pass</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-1-3" class="outline-4">
<h4 id="sec-3-1-3"><span class="section-number-4">3.1.3</span> Maximal Independent Set  // Unique Extraction From List</h4>
<div class="outline-text-4" id="text-3-1-3">
<p>
Given a collection of point-sets in the plane, we can use networkX to extract a large maximally independent &#x2013; wrt intersection&#x2013;
subcollection. 
</p>

<p>
For that, I construct a graph where 
</p>
<ol class="org-ol">
<li>Each point-set corresponds to a vertex in the graph and vice-versa
</li>
<li>There exists an edge between two vertices in the graph if and only if, 
the corresponding point-sets have a non-empty intersection.  
</li>
</ol>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">findMaximalIndependentOfNeighbourhoods</span>(  nbds , mis_algorithm  ):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">import</span> networkx <span style="color: #0000FF;">as</span> nx
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">G</span> = nx.Graph()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> G.add_nodes_from(<span style="color: #006FE0;">range</span>(<span style="color: #006FE0;">len</span>(nbds)))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">If two neighbourhoods intersect, draw </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">a corresponding edge in the graph. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(<span style="color: #006FE0;">len</span>(nbds)):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> j <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(i+1,<span style="color: #006FE0;">len</span>(nbds)):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">intersection_of_nbds_ij</span> = [  val  <span style="color: #0000FF;">for</span> val <span style="color: #0000FF;">in</span> nbds[i] <span style="color: #0000FF;">if</span> val <span style="color: #0000FF;">in</span> nbds[j]    ] 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">if</span> <span style="color: #006FE0;">len</span>(intersection_of_nbds_ij) &gt;= 1:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       G.add_edge(i,j)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Having constructed the neighbourhood, we proceed to find a good MIS</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">The quality of the solution is affected by the size of the MIS</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">The larger the maximal independent set, the better it is</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">if</span> mis_algorithm == <span style="color: #008000;">'networkx_random_choose_20_iter_best'</span>: 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">candidateSindices</span> = [ nx.maximal_independent_set(G) <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(20)  ]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">for candidate in candidateSindices: # for debugging</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#  </span><span style="color: #8D8D84; font-style: italic;">print candidate</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">sIndices</span> = [] <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Start value for finding the maximum</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> candidate <span style="color: #0000FF;">in</span> candidateSindices: <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Pick the largest independent set over 10 iterations</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">if</span> <span style="color: #006FE0;">len</span>(candidate) &gt; <span style="color: #006FE0;">len</span>(sIndices): <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Yay! Found a larger independent set!</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">print</span> <span style="color: #008000;">"Larger set!"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">sIndices</span> = candidate


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">elif</span> mis_algorithm == <span style="color: #008000;">'riksuggestion'</span>:

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Give cluster centers a special attribute marking it as a center. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">distanceFromRthNearestNeighbourDict</span> = {}

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> nbd, i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">zip</span>( nbds, <span style="color: #006FE0;">range</span>( <span style="color: #006FE0;">len</span>(nbds) )): <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Note that each neighbourhood's 0th element is the center, and that the nbd indices are sorted by distance from this zeroth element. So -1 makes sense</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">nbdCenterCoords</span>                      = <span style="color: #0000FF;">self</span>.pointCloud[ nbd[0] ] 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">nbdFarthestNeighbourCoords</span>           = <span style="color: #0000FF;">self</span>.pointCloud[ nbd[-1] ]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">distanceFromRthNearestNeighbourDict</span>[i] = <span style="color: #0000FF;">self</span>.dist(nbdCenterCoords, nbdFarthestNeighbourCoords)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   nx.set_node_attributes( G, <span style="color: #008000;">'distanceFromRthNearestNeighbour'</span>, distanceFromRthNearestNeighbourDict )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">import</span> collections
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Generate the order to remove the vertices</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">orderOfVerticesToDelete</span> = collections.deque(<span style="color: #006FE0;">sorted</span>(  <span style="color: #006FE0;">range</span>(<span style="color: #006FE0;">len</span>(nbds)) , key = <span style="color: #0000FF;">lambda</span> x: G.node[x][ <span style="color: #008000;">'distanceFromRthNearestNeighbour'</span> ]    ))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print orderOfVerticesToDelete</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">for i in orderOfVerticesToDelete:</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#  </span><span style="color: #8D8D84; font-style: italic;">print G.node[i]['distanceFromRthNearestNeighbour']</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">sIndices</span> = [ ]


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> orderOfVerticesToDelete:

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">try</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #BA36A5;">node</span> = orderOfVerticesToDelete[i]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #BA36A5;">nlist</span> = G.neighbors( node )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">for</span> n <span style="color: #0000FF;">in</span> nlist:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">try</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    G.remove_edge( node, n ) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Remove all edges emanating</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">except</span> nx.NetworkXError:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">continue</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>G.remove_node( node ) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Remove the node itself</span>


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">for</span> n <span style="color: #0000FF;">in</span> nlist:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">try</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    G.remove_node( n ) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Remove all the neighbours.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">except</span> nx.NetworkXError:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">continue</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>sIndices.append( node ) 

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">except</span> nx.NetworkXError:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">continue</span>


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">while( len( orderOfVerticesToDelete ) &gt;= 1 ): # This list changes during the iteration. </span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#     </span><span style="color: #8D8D84; font-style: italic;">try:</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#       </span><span style="color: #8D8D84; font-style: italic;">node  = orderOfVerticesToDelete[0]</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#     </span><span style="color: #8D8D84; font-style: italic;">except nx.NetworkXError:</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#         </span><span style="color: #8D8D84; font-style: italic;">print "Removing carcass"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#         </span><span style="color: #8D8D84; font-style: italic;">orderOfVerticesToDelete.popleft()</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#     </span><span style="color: #8D8D84; font-style: italic;">else:</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#       </span><span style="color: #8D8D84; font-style: italic;">sIndices.append( node ) # The very fact no exception was thrown means that you can freely add it to the independent set</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#       </span><span style="color: #8D8D84; font-style: italic;">nlist = G.neighbors( node )</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#       </span><span style="color: #8D8D84; font-style: italic;"># Delete all the edges emanating from  elements of nlist. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#       </span><span style="color: #8D8D84; font-style: italic;"># The fact that this did not throw an exception means 'node' still exists in the graph G</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#       </span><span style="color: #8D8D84; font-style: italic;">for n in nlist:</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#          </span><span style="color: #8D8D84; font-style: italic;">G.remove_edge( node, n ) # Remove all edges emanating</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#       </span><span style="color: #8D8D84; font-style: italic;">G.remove_node( node ) # Remove the node itself</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#       </span><span style="color: #8D8D84; font-style: italic;">for n in nlist:</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#         </span><span style="color: #8D8D84; font-style: italic;">G.remove_node( n ) # Remove all the neighbours.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#       </span><span style="color: #8D8D84; font-style: italic;">orderOfVerticesToDelete.popleft()</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">import</span> sys
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> <span style="color: #008000;">"Maximum independent Set Algorithm option not recognized!"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   sys.<span style="color: #D0372D;">exit</span>()


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">If two neighbourhoods intersect, draw </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">a corresponding edge in the graph. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">print sIndices</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> sIndices:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">for</span> j <span style="color: #0000FF;">in</span> sIndices:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">if</span> j &gt; i:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #BA36A5;">intersection_of_nbds_ij</span> = [val <span style="color: #0000FF;">for</span> val <span style="color: #0000FF;">in</span> nbds[i] <span style="color: #0000FF;">if</span> val <span style="color: #0000FF;">in</span> nbds[j] ]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">if</span> <span style="color: #006FE0;">len</span>(intersection_of_nbds_ij) &gt;= 1:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">print</span> <span style="color: #008000;">"Neighbourhoods intersect!"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      sys.<span style="color: #D0372D;">exit</span>()

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">return</span> [ nbds[s] <span style="color: #0000FF;">for</span> s <span style="color: #0000FF;">in</span> sIndices ]
</pre>
</div>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">extractUniqueElementsFromList</span>( L ):

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">uniqueElements</span> = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> elt <span style="color: #0000FF;">in</span> L:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">if</span> elt <span style="color: #0000FF;">not</span> <span style="color: #0000FF;">in</span> uniqueElements: <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Just discovered a brand new element!!</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   uniqueElements.append(elt)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> uniqueElements
</pre>
</div>
</div>
</div>
</div>



<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> R2L2 instantiation .</h3>
<div class="outline-text-3" id="text-3-2">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">class</span> <span style="color: #6434A3;">Algo_Static_4APX_R2_L2</span> (Algo_4APX_Metric):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   &lt;&lt;SETUP_AND_CLEANUP&gt;&gt;
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   &lt;&lt;PLOT_CLUSTERS&gt;&gt;  
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   &lt;&lt;PLOT_STATISTICS&gt;&gt;
</pre>
</div>
</div>
<div id="outline-container-sec-3-2-1" class="outline-4">
<h4 id="sec-3-2-1"><span class="section-number-4">3.2.1</span> Setup and Cleanup</h4>
<div class="outline-text-4" id="text-3-2-1">
<p>
This chunk is  self-explanatory. The constructor initializes state variables needed as input
along with data variables needed for a post-hoc analysis. These latter will be computed during the 
algorithm's run.  
</p>

<p>
Note that the final result of the clustering algorithm is stored in <b>self.computedClusterings</b>,  
of type <b><code>[[Int]]</code></b>, i.e. a list of list of indices. These indices correspond to the row-numbers 
of the <span class="underline">input</span> numpy array <b>pointCloud</b>: each row in pointCloud corresponds to a point in \(\mathbb{R}^2\). 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">__init__</span>(<span style="color: #0000FF;">self</span>, r, pointCloud):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">"""  r          : Cluster parameter</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      pointCloud : An n x 2 numpy array where n is the number </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">   of points in the cloud and each row contains </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">   the (x,y) coordinates of a point."""</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.r                    = r     
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.pointCloud           = pointCloud  
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.computedClusterings  = []  
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.algoName             = <span style="color: #008000;">'Decentralized Static r-Gather'</span>



<span style="color: #0000FF;">def</span> <span style="color: #006699;">clearAllStates</span>(<span style="color: #0000FF;">self</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.r                   = <span style="color: #D0372D;">None</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.pointCloud          = [] 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.computedClusterings = []


<span style="color: #0000FF;">def</span> <span style="color: #006699;">clearComputedClusteringsAndR</span>(<span style="color: #0000FF;">self</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.r                   = <span style="color: #D0372D;">None</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.computedClusterings = []


<span style="color: #0000FF;">def</span> <span style="color: #006699;">dist</span>(<span style="color: #0000FF;">self</span>, p,q):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #008000;">""" Euclidean distance between points p and q in R^2 """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">return</span> np.linalg.norm( [ p[0]-q[0] , 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      p[1]-q[1] ]  )


<span style="color: #0000FF;">def</span> <span style="color: #006699;">findNearestNeighbours</span>(<span style="color: #0000FF;">self</span>, pointCloud, k):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">"""  pointCloud : 2-d numpy array. Each row is a point</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      k          : The length of the neighbour list to compute. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> """</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">X</span>    = np.array(pointCloud)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">nbrs</span> = NearestNeighbors(n_neighbors=k, algorithm=<span style="color: #008000;">'ball_tree'</span>).fit( X )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">distances</span>, <span style="color: #BA36A5;">indices</span> = nbrs.kneighbors(X)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">return</span> distances, indices


<span style="color: #0000FF;">def</span> <span style="color: #006699;">rangeSearch</span>(<span style="color: #0000FF;">self</span>, pointCloud, radius):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #008000;">""" A wrapper for a good neighbour search routine provided by Scipy.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> Given a point-cloud, return the neighbours within a distance of 'radius'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> for every element of the pointcloud. return the neighbour indices , sorted </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> according to distance. """</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">X</span>        = np.array( pointCloud )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">mykdtree</span> = spatial.KDTree( X )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">nbrlists</span> = <span style="color: #006FE0;">list</span>( mykdtree.query_ball_point( X, radius) )


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">distances</span> = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">for</span> index  <span style="color: #0000FF;">in</span>  <span style="color: #006FE0;">range</span>(<span style="color: #006FE0;">len</span>(nbrlists)):

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">def</span> <span style="color: #006699;">fn_index</span>( i ): <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Distance function local to this iteration of the loop</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">return np.linalg.norm(  [  X[i][0] - X[index][0]   , </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#                           </span><span style="color: #8D8D84; font-style: italic;">X[i][1] - X[index][1]    ]    )</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #0000FF;">self</span>.dist(X[i], X[index])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Replace the unsorted array with the sorted one. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #BA36A5;">nbrlists</span>[index]  = <span style="color: #006FE0;">sorted</span>( nbrlists[index], key = fn_index  ) 

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Get corresponding distances, which will now naturally be in sorted order. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>distances.append( <span style="color: #006FE0;">map</span>( fn_index, nbrlists[ index ] ) ) 


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">indices</span> = nbrlists <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Just a hack, too lazy to change nbrlists to the name indices above. </span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">return</span> distances, indices
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-2-2" class="outline-4">
<h4 id="sec-3-2-2"><span class="section-number-4">3.2.2</span> Plot Clusters</h4>
<div class="outline-text-4" id="text-3-2-2">
<p>
Once the clustering has been constructed we can now visualize it.This function in particular will continue to be in flux: 
so I'll let the code do the talking here. Just note that the algorithm object does not store a reference to the axes object 
on which the clusterings will be plotted. Hence we have to explicitly pass the axes object when calling this method. 
<font color = "red">.   This is a conscious design goal! </font> 'Twill help us in visually comparing the 
cluters outputted by the different approximation algorithms for the same problem. Depending on the algorithms to be compared 
construct a fig object with multiple axes objects. Then each visualization routine of an algorithm gets an axes-object 
reference from this figure. 
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">plotClusters</span>(<span style="color: #0000FF;">self</span>,  ax    , 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      pointSize=200, 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      marker=<span style="color: #008000;">'o'</span>   , 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      pointCloudInfo=<span style="color: #008000;">''</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      annotatePoints=<span style="color: #D0372D;">True</span>):

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Plot point-cloud </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">xs</span> = [x <span style="color: #0000FF;">for</span> (x,y) <span style="color: #0000FF;">in</span> <span style="color: #0000FF;">self</span>.pointCloud]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">ys</span> = [y <span style="color: #0000FF;">for</span> (x,y) <span style="color: #0000FF;">in</span> <span style="color: #0000FF;">self</span>.pointCloud]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     ax.plot(xs,ys,<span style="color: #008000;">'bo'</span>, markersize=3) 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     ax.set_aspect(1.0)    

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">if</span> annotatePoints==<span style="color: #D0372D;">True</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Annotate each point with a corresponding number. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">numPoints</span> = <span style="color: #006FE0;">len</span>(xs)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">labels</span> = [<span style="color: #008000;">'{0}'</span>.<span style="color: #006FE0;">format</span>(i) <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numPoints)]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> label, x, y <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">zip</span>(labels, xs, ys):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> ax.annotate(  label                       , 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       xy         = (x, y)         , 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       xytext     = (-3, 0)      ,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       textcoords = <span style="color: #008000;">'offset points'</span>, 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       ha         = <span style="color: #008000;">'right'</span>        , 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       va         = <span style="color: #008000;">'bottom'</span>)


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Overlay with cluster-groups.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">for</span> s <span style="color: #0000FF;">in</span> <span style="color: #0000FF;">self</span>.computedClusterings:

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">clusterColor</span> = getRandomColor()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">xc</span> = [ xs[i]  <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> s   ]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">yc</span> = [ ys[i]  <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> s   ]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Mark all members of a cluster with a nice fat dot around it. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">ax.scatter(xc, yc, c=clusterColor, </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#           </span><span style="color: #8D8D84; font-style: italic;">marker=marker, </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#           </span><span style="color: #8D8D84; font-style: italic;">s=pointSize) </span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">ax.plot(xc,yc, alpha=0.5, markersize=1 , markerfacecolor=clusterColor , linewidth=0)</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">ax.set_aspect(1.0)</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">For some stupid reason sp.spatial.ConvexHull requires at least three points for computing the convex hull. </span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">if</span> <span style="color: #006FE0;">len</span>(xc) &gt;= 3 : 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">hull</span> = spatial.ConvexHull(  np.array(<span style="color: #006FE0;">zip</span>(xc,yc)) , qhull_options=<span style="color: #008000;">"QJn"</span> ) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Last option because of this http://stackoverflow.com/q/30132124/505306</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">hullPoints</span> = np.array( <span style="color: #006FE0;">zip</span>( [ xc[i] <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> hull.vertices ],  
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> [ yc[i] <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> hull.vertices ] ) )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     ax.add_patch( mpl.patches.Polygon(hullPoints, alpha=0.5, 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       facecolor=clusterColor) )


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">elif</span> <span style="color: #006FE0;">len</span>(xc) == 2:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      ax.plot( xc,yc, color=clusterColor )


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       ax.set_aspect(1.0)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       ax.set_title( <span style="color: #0000FF;">self</span>.algoName + <span style="color: #008000;">'\n r='</span> + <span style="color: #006FE0;">str</span>(<span style="color: #0000FF;">self</span>.r), fontdict={<span style="color: #008000;">'fontsize'</span>:15})
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       ax.set_xlabel(<span style="color: #008000;">'Latitude'</span>, fontdict={<span style="color: #008000;">'fontsize'</span>:10})
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       ax.set_ylabel(<span style="color: #008000;">'Longitude'</span>,fontdict={<span style="color: #008000;">'fontsize'</span>:10})

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">ax.get_xaxis().set_ticks( [] ,  fontdict={'fontsize':10})</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">ax.get_yaxis().set_ticks( [],  fontdict={'fontsize':10} ) </span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       ax.grid(b=<span style="color: #D0372D;">True</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-2-3" class="outline-4">
<h4 id="sec-3-2-3"><span class="section-number-4">3.2.3</span> Plot Statistics</h4>
<div class="outline-text-4" id="text-3-2-3">
<p>
Axes artist objects are Hashable! We use this to get a lot of flexibility 
during plotting! I verified this using this answer <a href="http://stackoverflow.com/a/3460747/505306">http://stackoverflow.com/a/3460747/505306</a> 
</p>

<p>
The nice thing about these statistics, are that they along with cluster sizes, can be rendered 
online as we keep filling in more and more points by appropriate bindings to button press events. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">plotStatistics</span>(<span style="color: #0000FF;">self</span>, axStatsDict ):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #008000;">""" axStatsDict, specifies the mapping of axes objects to the statistic</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      being plotted."""</span> 

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">plotConvexHullDiameters</span>(ax):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">pass</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">plotMinBoundingCircleDiameters</span>(ax):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">pass</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">plotClusterPopulationSizes</span>(ax):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">barHeights</span> = <span style="color: #006FE0;">map</span>(<span style="color: #006FE0;">len</span>, <span style="color: #0000FF;">self</span>.computedClusterings )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #BA36A5;">numBars</span>    = <span style="color: #006FE0;">len</span>(barHeights)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     ax.bar( <span style="color: #006FE0;">range</span>(numBars) ,barHeights, width=1.0, align=<span style="color: #008000;">'center'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     ax.set_title(<span style="color: #008000;">'Number of points per Cluster'</span>, fontdict={<span style="color: #008000;">'fontsize'</span>:30})

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     ax.set_aspect(1.0)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     ax.grid(b=<span style="color: #D0372D;">True</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">for</span> ax, statistic <span style="color: #0000FF;">in</span> axStatsDict.iteritems():

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">if</span> statistic == <span style="color: #008000;">'convexHullDiameters'</span>: 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  plotConvexHullDiameters(ax) 

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">elif</span> statistic == <span style="color: #008000;">'minBoundingCircleDiameters'</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  plotMinBoundingCircleDiameters(ax)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">elif</span> statistic == <span style="color: #008000;">'clusterPopulationSizes'</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  plotClusterPopulationSizes(ax)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">pass</span>
</pre>
</div>
</div>
</div>
</div>
</div>



















<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 2-APX Dynamic \(r\)-Gather</h2>
<div class="outline-text-2" id="text-4">
<p>
The following concrete class inheriting from <b><code>AlgoAggarwalStatic</code></b> is implemented for the trajectory case
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">class</span> <span style="color: #6434A3;">AlgoJieminDynamic</span>( AlgoAggarwalStatic ):

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">__init__</span>(<span style="color: #0000FF;">self</span>, r,  pointCloud,  memoizeNbrSearch = <span style="color: #D0372D;">False</span>, distances_and_indices_file=<span style="color: #008000;">''</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #008000;">""" Initialize the AlgoJieminDynamic</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  memoizeNbrSearch = this computes the table in the constructor itself. no need for a file. The file option below, is only useful for large runs.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  distances_and_indices_file = must be a string identifer for the file-name on disk. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       containing the pairwise-distances and corresponding index numbers</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       between points. I had to appeal to this hack, since sklearn's algorithm to search in arbitrary metric spaces does not work for my case. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       Also the brute-force computation, which I initially implemented took far too long. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       Since  don't know how to do the neighbor computation for arbitrary metric spaces, I just precompute </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       everything into a table, stored in a YAML file.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      """</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">from</span> termcolor <span style="color: #0000FF;">import</span> colored
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">import</span> yaml

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">len(trajectories) = number of cars</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">len(trajectories[i]) = number of GPS samples taken for the ith car. For shenzhen data set this is</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">constant for all cars.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">self</span>.r                    = r     
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">self</span>.pointCloud           = pointCloud <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Should be of type  [ [(Double,Double)] ] </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">self</span>.computedClusterings  = []  
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">self</span>.algoName             = <span style="color: #008000;">'r-Gather for trajectory clustering'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">self</span>.superSlowBruteForce  = <span style="color: #D0372D;">False</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">if</span> memoizeNbrSearch :
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">numpts</span>     = <span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.pointCloud)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    (<span style="color: #0000FF;">self</span>.nbrTable_dist, <span style="color: #0000FF;">self</span>.nbrTable_idx) = ([], [])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts):

                     <span style="color: #0000FF;">print</span> colored (<span style="color: #008000;">'Calculating distance from '</span>+<span style="color: #006FE0;">str</span>(i), <span style="color: #008000;">'white'</span>, <span style="color: #008000;">'on_magenta'</span>,[<span style="color: #008000;">'underline'</span>,<span style="color: #008000;">'bold'</span>]) 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">traj_i</span> = pointCloud[i]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">distances_and_indices</span> = []

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">for</span> j <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts):

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">traj_j</span> = pointCloud[j]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">dij</span> = <span style="color: #0000FF;">self</span>.dist( traj_i, traj_j)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> distances_and_indices.append((dij,j))
                          <span style="color: #0000FF;">print</span> <span style="color: #008000;">'......to j= '</span>  , j, <span style="color: #008000;">'  dij= '</span>, dij

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Now sort the distances of all points from point i. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    distances_and_indices.sort(key=<span style="color: #0000FF;">lambda</span> tup: tup[0]) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">http://tinyurl.com/mf8yz5b</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">self</span>.nbrTable_dist.append( [ d   <span style="color: #0000FF;">for</span> (d,idx) <span style="color: #0000FF;">in</span> distances_and_indices ]  )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">self</span>.nbrTable_idx.append ( [ idx <span style="color: #0000FF;">for</span> (d,idx) <span style="color: #0000FF;">in</span> distances_and_indices ]  )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">elif</span> distances_and_indices_file != <span style="color: #008000;">''</span>: <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Non empty file name passed</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">"Started reading neighbor file"</span>, <span style="color: #008000;">'white'</span>,<span style="color: #008000;">'on_magenta'</span>,[<span style="color: #008000;">'bold'</span>,<span style="color: #008000;">'underline'</span>])              
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">stream</span>       = <span style="color: #006FE0;">open</span>(distances_and_indices_file,<span style="color: #008000;">'r'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">filecontents</span> = yaml.load(stream) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">This will be a dictionary</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">"Finished reading neighbor file"</span>, <span style="color: #008000;">'white'</span>,<span style="color: #008000;">'on_green'</span>,[<span style="color: #008000;">'bold'</span>,<span style="color: #008000;">'underline'</span>])              

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">self</span>.nbrTable_dist = filecontents[<span style="color: #008000;">'Distances'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">self</span>.nbrTable_idx  = filecontents[<span style="color: #008000;">'Indices'</span>]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">self</span>.superSlowBruteForce = <span style="color: #D0372D;">True</span>


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">clearAllStates</span>(<span style="color: #0000FF;">self</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.r                   = <span style="color: #D0372D;">None</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.pointCloud          = [] 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.computedClusterings = []

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">clearComputedClusteringsAndR</span>(<span style="color: #0000FF;">self</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">self</span>.r                   = <span style="color: #D0372D;">None</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">self</span>.computedClusterings = []

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">dist</span>(<span style="color: #0000FF;">self</span>, p,q):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #008000;">""" distance between two trajectories p and q. The trajectories form a metric space under this distance </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      If you visualize the given table as a microsoft excel sheet, where each column represents the trajectory </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      of a car, then the distance between two trajectories is the max of L infinity norm of the difference of two </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      columns. </span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      p,q :: [ [Double,Double] ]. The length of p or q, indicates the number of GPS samples taken</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Inside distance function"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "p is ", p.shape, ' ' , p</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "q is ", q.shape, ' ' , q</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">dpq</span> = 0
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">for</span> t <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(<span style="color: #006FE0;">len</span>(p)):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">M is the euclidean distance between two points at time t.  </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">M</span> = np.sqrt( <span style="color: #006FE0;">abs</span>( (p[t][0]-q[t][0])**2 + (p[t][1]-q[t][1])**2 ) ) 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> M &gt; dpq:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">dpq</span> = M

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print p, q, dpq, ' ' , np.sqrt( (p[0][0]-q[0][0])**2 + (p[0][1]-q[0][1])**2)</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">from termcolor import colored </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print colored( str(dpq) , 'white', 'on_red', ['bold'] ) # This to make sure that dpq being returned is a sane number.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">return</span> dpq


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">findNearestNeighbours</span>(<span style="color: #0000FF;">self</span>, pointCloud, k):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #008000;">"""Return the k-nearest nearest neighbours"""</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np, itertools <span style="color: #0000FF;">as</span> it
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">from</span> termcolor <span style="color: #0000FF;">import</span> colored 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">numpts</span> = <span style="color: #006FE0;">len</span>(pointCloud)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Calling sklearn works only on R2L2 case for some reason. So for the moment, the only option is to use brute-force techniques.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">if</span> <span style="color: #0000FF;">self</span>.superSlowBruteForce : 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">'Calling Super-slow brute Force kNN'</span> , <span style="color: #008000;">'white'</span>, <span style="color: #008000;">'on_magenta'</span>, [<span style="color: #008000;">'bold'</span>])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">distances</span>, <span style="color: #BA36A5;">indices</span> = ([], [])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">traj_i</span> = pointCloud[i]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">distances_and_indices</span> = []

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">for</span> j <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts):

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">traj_j</span> = pointCloud[j]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">dij</span> = <span style="color: #0000FF;">self</span>.dist( traj_i, traj_j)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> distances_and_indices.append((dij,j))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Now sort the distances of all points from point i. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  distances_and_indices.sort(key=<span style="color: #0000FF;">lambda</span> tup: tup[0]) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">http://tinyurl.com/mf8yz5b</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  distances.append( [ d   <span style="color: #0000FF;">for</span> ( d,  _ ) <span style="color: #0000FF;">in</span> distances_and_indices[0:k] ]  )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  indices.append  ( [ idx <span style="color: #0000FF;">for</span> ( _, idx) <span style="color: #0000FF;">in</span> distances_and_indices[0:k] ]  )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Distance matrix is ", np.array(distances) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Index matrix is  "  , np.array(indices) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">'Finished Super-slow brute Force'</span> , <span style="color: #008000;">'white'</span>, <span style="color: #008000;">'on_green'</span>, [<span style="color: #008000;">'bold'</span>, <span style="color: #008000;">'underline'</span>])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">return</span> distances, indices

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">else</span>: <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">This means the table has already been computed or read in from a file in the constructor itself</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">'Calling  Memoized brute Force kNN'</span> , <span style="color: #008000;">'white'</span>, <span style="color: #008000;">'on_magenta'</span>, [<span style="color: #008000;">'bold'</span>])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">zipDistIdx = zip (self.nbrTable_dist, self.nbrTable_idx)</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print zipDistIdx[0][0:k]</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">distances</span> = [ [d   <span style="color: #0000FF;">for</span> d   <span style="color: #0000FF;">in</span> <span style="color: #0000FF;">self</span>.nbrTable_dist[i][0:k]] <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts)]        
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">indices</span>   = [ [idx <span style="color: #0000FF;">for</span> idx <span style="color: #0000FF;">in</span> <span style="color: #0000FF;">self</span>.nbrTable_idx[i][0:k] ] <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts)]        

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Distance matrix is ", np.array(distances) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Index matrix is  "  , np.array(indices) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">'Finished Memoized brute Force kNN'</span> , <span style="color: #008000;">'white'</span>, <span style="color: #008000;">'on_green'</span>, [<span style="color: #008000;">'bold'</span>, <span style="color: #008000;">'underline'</span>])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">return</span> distances, indices





<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">rangeSearch</span>(<span style="color: #0000FF;">self</span>, pointCloud, radius):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">""" A range search routine.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> Given a point-cloud, return the neighbours within a distance of 'radius'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> for every element of the pointcloud. return the neighbour indices , sorted </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> according to distance. """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">from</span> termcolor <span style="color: #0000FF;">import</span> colored 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">import</span> itertools <span style="color: #0000FF;">as</span> it
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">import</span> sys, time

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">"Inside trajectory rangeSearch"</span>,<span style="color: #008000;">'white'</span>, <span style="color: #008000;">'on_magenta'</span>,[<span style="color: #008000;">'bold'</span>])


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">numpts</span>              = <span style="color: #006FE0;">len</span>(pointCloud)


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">if</span> <span style="color: #0000FF;">self</span>.superSlowBruteForce:

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">distances</span>, <span style="color: #BA36A5;">indices</span> = ([], [])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">traj_i</span> = pointCloud[i]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">distances_and_indices</span> = []

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">for</span> j <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts):

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">traj_j</span> = pointCloud[j]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">dij</span> = <span style="color: #0000FF;">self</span>.dist( traj_i, traj_j)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">if</span> dij &lt; radius: <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">We are doing range search </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       distances_and_indices.append((dij,j))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Now sort the distances of all points from point i. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    distances_and_indices.sort(key=<span style="color: #0000FF;">lambda</span> tup: tup[0]) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">http://tinyurl.com/mf8yz5b</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    distances.append([d   <span style="color: #0000FF;">for</span> (d, _ ) <span style="color: #0000FF;">in</span> distances_and_indices])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    indices.append  ([idx <span style="color: #0000FF;">for</span> (_,idx) <span style="color: #0000FF;">in</span> distances_and_indices])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Radius specified was ", colored(str(radius), 'white', 'on_green', ['bold'])</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Distance matrix is \n", np.array(distances) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Index matrix is  \n"  , np.array(indices) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">'Finished rangeSearch Neighbors'</span>, <span style="color: #008000;">'magenta'</span>, <span style="color: #008000;">'on_grey'</span>, [<span style="color: #008000;">'bold'</span>, <span style="color: #008000;">'underline'</span>])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">return</span> distances, indices

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">else</span>: <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">This means the table has already been computed or read in from a file in the constructor itself</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">'Calling  Memoized brute Force rangeSearch'</span> , <span style="color: #008000;">'yellow'</span>, <span style="color: #008000;">'on_magenta'</span>, [<span style="color: #008000;">'bold'</span>])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">start</span> = time.time()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">distances</span>, <span style="color: #BA36A5;">indices</span> = ([], [])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">d_npbr</span>   = np.array(<span style="color: #0000FF;">self</span>.nbrTable_dist[i])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">idx_npbr</span> = np.array(<span style="color: #0000FF;">self</span>.nbrTable_idx[i], dtype=<span style="color: #006FE0;">int</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">distances_and_indices</span> = <span style="color: #006FE0;">zip</span> ( d_npbr, idx_npbr  )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#################################### </span><span style="color: #8D8D84; font-style: italic;">Bench</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">tmpd</span>   = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">tmpidx</span> = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">for</span> (d, idx) <span style="color: #0000FF;">in</span> distances_and_indices:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">if</span> d&lt;radius:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   tmpd.append(d)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   tmpidx.append(idx)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      distances.append(tmpd)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      indices.append(tmpidx)                

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">######################################### </span><span style="color: #8D8D84; font-style: italic;">Gold : But this compares distance twice </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">distances.append([d   for (d ,  _ ) in distances_and_indices if d&lt;radius ])  </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">indices.append  ([idx for (d , idx) in distances_and_indices if d&lt;radius ])</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">end</span> = time.time()       
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">print</span> <span style="color: #008000;">"Time taken for Range Search is "</span>, end-start
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Distance matrix is ", np.array(distances) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Index matrix is  "  , np.array(indices) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">'Finished Memoized brute Force rangeSearch'</span> , <span style="color: #008000;">'yellow'</span>, <span style="color: #008000;">'on_blue'</span>, [<span style="color: #008000;">'bold'</span>, <span style="color: #008000;">'underline'</span>])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">return</span> distances, indices

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">plotClusters</span>(<span style="color: #0000FF;">self</span>,  ax            , 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    trajThickness  = 10 , 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    marker         = <span style="color: #008000;">'o'</span> , 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    pointCloudInfo = <span style="color: #008000;">''</span>  ,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    annotatePoints = <span style="color: #D0372D;">False</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    plot_xytspace = <span style="color: #D0372D;">False</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #008000;">""" Plot the trajectory clusters computed by the algorithm."""</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">import</span> colorsys
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">import</span> itertools <span style="color: #0000FF;">as</span> it

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">trajectories</span> = <span style="color: #0000FF;">self</span>.pointCloud
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">numCars</span>      = <span style="color: #006FE0;">len</span>(trajectories)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">numClusters</span>  = <span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.computedClusterings)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Generate equidistant colors</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">colors</span>       = [(x*1.0/numClusters, 0.5, 0.5) <span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numClusters)]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">colors</span>       = <span style="color: #006FE0;">map</span>(<span style="color: #0000FF;">lambda</span> x: colorsys.hsv_to_rgb(*x), colors)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">An iterator tht creates an infinite list.Ala Haskell's cycle() function.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">marker_pool  =it.cycle (["o", "v", "s", "D", "h", "x"])</span>


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">for</span> clusIdx, cluster <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">enumerate</span>(<span style="color: #0000FF;">self</span>.computedClusterings):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">clusterColor</span> = colors[clusIdx]  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">np.random.rand(3,1)</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">for</span> carIdx <span style="color: #0000FF;">in</span> cluster:
                    <span style="color: #BA36A5;">xdata</span> = [point[0] <span style="color: #0000FF;">for</span> point <span style="color: #0000FF;">in</span> trajectories[carIdx]]
                    <span style="color: #BA36A5;">ydata</span> = [point[1] <span style="color: #0000FF;">for</span> point <span style="color: #0000FF;">in</span> trajectories[carIdx]]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> plot_xytspace == <span style="color: #D0372D;">True</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">timeStamps</span> = np.linspace(0, 1, <span style="color: #006FE0;">len</span>(xdata))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "TimeStamps are : ", timeStamps</span>
                       line, = ax.plot(xdata, ydata, timeStamps, <span style="color: #008000;">'o-'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
                         line, = ax.plot(xdata, ydata, <span style="color: #008000;">'o-'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Every line in a cluster gets a unique color       </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   line.set_color(clusterColor)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   line.set_markeredgecolor(<span style="color: #008000;">'k'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Cluster center i.e. cluster[0] is made bolder and thicker. Think of it as a highway</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">isClusterCenter = (carIdx == cluster[0])</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">line.set_linewidth(trajThickness + 3*isClusterCenter)</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">line.set_alpha(0.5 + 0.5*isClusterCenter)</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Only highways are marked with markers </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">if isClusterCenter:</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#     </span><span style="color: #8D8D84; font-style: italic;">line.set_marker( next(marker_pool) )</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#     </span><span style="color: #8D8D84; font-style: italic;">line.set_markersize(14)</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#     </span><span style="color: #8D8D84; font-style: italic;">line.set_markeredgewidth(2)</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#     </span><span style="color: #8D8D84; font-style: italic;">line.set_markeredgecolor('k')</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;">#     </span><span style="color: #8D8D84; font-style: italic;">line.set_markevery(3)</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       ax.set_title( <span style="color: #0000FF;">self</span>.algoName + <span style="color: #008000;">'\n r='</span> + <span style="color: #006FE0;">str</span>(<span style="color: #0000FF;">self</span>.r), fontdict={<span style="color: #008000;">'fontsize'</span>:20})
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       ax.set_xlabel(<span style="color: #008000;">'Latitude'</span>, fontdict={<span style="color: #008000;">'fontsize'</span>:15})
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       ax.set_ylabel(<span style="color: #008000;">'Longitude'</span>,fontdict={<span style="color: #008000;">'fontsize'</span>:15})


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">animateClusters</span>(<span style="color: #0000FF;">self</span>, ax, fig, lats, longs,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    interval_between_frame=200,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    lineTransparency   = 0.55,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    markerTransparency = 1.0,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    saveAnimation=<span style="color: #D0372D;">False</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #008000;">"""Instead of viewing the trajectories like a bowl of spaghetti, watch them </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      evolve in time. Each cluster gets assigned a unique color just like in plotClusters</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      interval_between_frames is in milliseconds.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      """</span> 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">print</span> lats, longs
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">numCars</span>      = <span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.pointCloud)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">numClusters</span>  = <span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.computedClusterings)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">numSamples</span>   = <span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.pointCloud[0])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Generate equidistant colors</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">colors</span>       = [(x*1.0/numClusters, 0.5, 0.5) <span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numClusters)]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">colors</span>       = <span style="color: #006FE0;">map</span>(<span style="color: #0000FF;">lambda</span> x: colorsys.hsv_to_rgb(*x), colors)


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">For each car create a trajectory object. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">trajectories</span> = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">for</span> clusIdx, cluster <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">enumerate</span>(<span style="color: #0000FF;">self</span>.computedClusterings):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">print</span> <span style="color: #008000;">"Setting line"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">linecolor</span>   = colors[clusIdx]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">linecolor</span>   = ( linecolor[0], linecolor[1], linecolor[2] , lineTransparency) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Augment with a transparency</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">markercolor</span> = (linecolor[0], linecolor[1], linecolor[2], markerTransparency)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">for</span> traj <span style="color: #0000FF;">in</span> cluster:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">print</span> <span style="color: #008000;">"---&lt; Line Set"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      line, = ax.plot([],[], lw=3, markerfacecolor=markercolor, markersize=5)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      line.set_marker(<span style="color: #008000;">'o'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      line.set_c(linecolor)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      trajectories.append(line)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">ax.set_title('r= ' + str(self.r) + + ' Clusters= ', str(numClusters), fontdict={'fontsize':40})</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      ax.set_xlabel(<span style="color: #008000;">'Latitude'</span>, fontdict={<span style="color: #008000;">'fontsize'</span>:20})
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      ax.set_ylabel(<span style="color: #008000;">'Longitude'</span>, fontdict={<span style="color: #008000;">'fontsize'</span>:20})

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">A special dumb initial function.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Absolutely essential if you do blitting</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">otherwise it will call the generator as an</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">initial function, leading to trouble</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">def</span> <span style="color: #006699;">init</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">global ax</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">print</span> <span style="color: #008000;">"Initializing "</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">return</span> ax.lines

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Update the state of rGather</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">def</span> <span style="color: #006699;">rGather</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #008000;">""" Run the online r-gather algorithm as the cars</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  move around. TODO: Make this function itself call</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  another generator which is revealing the data piece</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  by piece. Generators all the way down! Chaining of</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  several functions and lazy evaluation!!</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numSamples):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">for</span> car <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numCars):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">xdata</span> = lats [0:i+1,car]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">ydata</span> = longs[0:i+1,car]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  trajectories[car].set_data( xdata, ydata )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">yield</span> trajectories, i


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Separating the animateData and the rGather generator function allows</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">def</span> <span style="color: #006699;">animateData</span>(state, fig, ax):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #008000;">""" Render the trajectories rendered by the rGather algorithms</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  and add fancy effects.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">trajectories</span> = state[0] <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">All trajectories</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">currentTime</span>  = state[1] <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">The time at which to animate</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">if</span> currentTime &gt; 1:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">for</span> car <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(<span style="color: #006FE0;">len</span>(trajectories)):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  trajectories[car].set_markevery(  (currentTime,currentTime)  )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">return</span> trajectories

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Call the animator.  blit=True means only re-draw the parts that have changed.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Ensures better speed</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">anim</span> = animation.FuncAnimation(fig, animateData, rGather(),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     init_func=init, interval=200, blit=<span style="color: #D0372D;">False</span>, fargs=(fig,ax))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">The draw commands are very important for the animation to be rednered.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      fig.canvas.draw()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      plt.show()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">anim.save('shenzen_show_scrap.mp4', fps=5, extra_args=['-vcodec', 'libx264']) ; print "Animation saved!"</span>
</pre>
</div>




<p>
<code>============================================================================================================================================================================================================</code>
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 4-APX Dynamic \(r\)-Gather</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">class</span> <span style="color: #6434A3;">Algo_Dynamic_4APX_R2_Linf</span> ( Algo_4APX_Metric ):

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">__init__</span>(<span style="color: #0000FF;">self</span>, r,  pointCloud,  memoizeNbrSearch = <span style="color: #D0372D;">False</span>, distances_and_indices_file=<span style="color: #008000;">''</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #008000;">""" Initialize the AlgoJieminDynamic</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  memoizeNbrSearch = this computes the table in the constructor itself. no need for a file. The file option below, is only useful for large runs.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  distances_and_indices_file = must be a string identifer for the file-name on disk. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       containing the pairwise-distances and corresponding index numbers</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       between points. I had to appeal to this hack, since sklearn's algorithm to search in arbitrary metric spaces does not work for my case. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       Also the brute-force computation, which I initially implemented took far too long. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       Since  don't know how to do the neighbor computation for arbitrary metric spaces, I just precompute </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       everything into a table, stored in a YAML file.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      """</span>


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">len(trajectories) = number of cars</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">len(trajectories[i]) = number of GPS samples taken for the ith car. For shenzhen data set this is</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">constant for all cars.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">self</span>.r                    = r     
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">self</span>.pointCloud           = pointCloud <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Should be of type  [ [(Double,Double)] ] </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">self</span>.computedClusterings  = []  
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">self</span>.algoName             = <span style="color: #008000;">'r-Gather for trajectory clustering'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">self</span>.superSlowBruteForce  = <span style="color: #D0372D;">False</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">if</span> memoizeNbrSearch :
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">numpts</span>     = <span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.pointCloud)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    (<span style="color: #0000FF;">self</span>.nbrTable_dist, <span style="color: #0000FF;">self</span>.nbrTable_idx) = ([], [])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts):

                     <span style="color: #0000FF;">print</span> colored (<span style="color: #008000;">'Calculating distance from '</span>+<span style="color: #006FE0;">str</span>(i), <span style="color: #008000;">'white'</span>, <span style="color: #008000;">'on_magenta'</span>,[<span style="color: #008000;">'underline'</span>,<span style="color: #008000;">'bold'</span>]) 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">traj_i</span> = pointCloud[i]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">distances_and_indices</span> = []

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">for</span> j <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts):

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">traj_j</span> = pointCloud[j]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">dij</span> = <span style="color: #0000FF;">self</span>.dist( traj_i, traj_j)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> distances_and_indices.append((dij,j))
                          <span style="color: #0000FF;">print</span> <span style="color: #008000;">'......to j= '</span>  , j, <span style="color: #008000;">'  dij= '</span>, dij

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Now sort the distances of all points from point i. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    distances_and_indices.sort(key=<span style="color: #0000FF;">lambda</span> tup: tup[0]) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">http://tinyurl.com/mf8yz5b</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">self</span>.nbrTable_dist.append( [ d   <span style="color: #0000FF;">for</span> (d,idx) <span style="color: #0000FF;">in</span> distances_and_indices ]  )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">self</span>.nbrTable_idx.append ( [ idx <span style="color: #0000FF;">for</span> (d,idx) <span style="color: #0000FF;">in</span> distances_and_indices ]  )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">elif</span> distances_and_indices_file != <span style="color: #008000;">''</span>: <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Non empty file name passed</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">"Started reading neighbor file"</span>, <span style="color: #008000;">'white'</span>,<span style="color: #008000;">'on_magenta'</span>,[<span style="color: #008000;">'bold'</span>,<span style="color: #008000;">'underline'</span>])              
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">stream</span>       = <span style="color: #006FE0;">open</span>(distances_and_indices_file,<span style="color: #008000;">'r'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">filecontents</span> = yaml.load(stream) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">This will be a dictionary</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">"Finished reading neighbor file"</span>, <span style="color: #008000;">'white'</span>,<span style="color: #008000;">'on_green'</span>,[<span style="color: #008000;">'bold'</span>,<span style="color: #008000;">'underline'</span>])              

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">self</span>.nbrTable_dist = filecontents[<span style="color: #008000;">'Distances'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">self</span>.nbrTable_idx  = filecontents[<span style="color: #008000;">'Indices'</span>]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">self</span>.superSlowBruteForce = <span style="color: #D0372D;">True</span>


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">clearAllStates</span>(<span style="color: #0000FF;">self</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.r                   = <span style="color: #D0372D;">None</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.pointCloud          = [] 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.computedClusterings = []

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">clearComputedClusteringsAndR</span>(<span style="color: #0000FF;">self</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">self</span>.r                   = <span style="color: #D0372D;">None</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">self</span>.computedClusterings = []

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">dist</span>(<span style="color: #0000FF;">self</span>, p,q):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #008000;">""" distance between two trajectories p and q. The trajectories form a metric space under this distance </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      If you visualize the given table as a microsoft excel sheet, where each column represents the trajectory </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      of a car, then the distance between two trajectories is the max of L infinity norm of the difference of two </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      columns. </span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      p,q :: [ [Double,Double] ]. The length of p or q, indicates the number of GPS samples taken</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Inside distance function"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "p is ", p.shape, ' ' , p</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "q is ", q.shape, ' ' , q</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">dpq</span> = 0
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">for</span> t <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(<span style="color: #006FE0;">len</span>(p)):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">M is the euclidean distance between two points at time t.  </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">M</span> = np.sqrt( <span style="color: #006FE0;">abs</span>( (p[t][0]-q[t][0])**2 + (p[t][1]-q[t][1])**2 ) ) 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> M &gt; dpq:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">dpq</span> = M

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print p, q, dpq, ' ' , np.sqrt( (p[0][0]-q[0][0])**2 + (p[0][1]-q[0][1])**2)</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">from termcolor import colored </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print colored( str(dpq) , 'white', 'on_red', ['bold'] ) # This to make sure that dpq being returned is a sane number.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">return</span> dpq


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">findNearestNeighbours</span>(<span style="color: #0000FF;">self</span>, pointCloud, k):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #008000;">"""Return the k-nearest nearest neighbours"""</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np, itertools <span style="color: #0000FF;">as</span> it
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">from</span> termcolor <span style="color: #0000FF;">import</span> colored 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">numpts</span> = <span style="color: #006FE0;">len</span>(pointCloud)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Calling sklearn works only on R2L2 case for some reason. So for the moment, the only option is to use brute-force techniques.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">if</span> <span style="color: #0000FF;">self</span>.superSlowBruteForce : 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">'Calling Super-slow brute Force kNN'</span> , <span style="color: #008000;">'white'</span>, <span style="color: #008000;">'on_magenta'</span>, [<span style="color: #008000;">'bold'</span>])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">distances</span>, <span style="color: #BA36A5;">indices</span> = ([], [])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">traj_i</span> = pointCloud[i]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">distances_and_indices</span> = []

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">for</span> j <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts):

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">traj_j</span> = pointCloud[j]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">dij</span> = <span style="color: #0000FF;">self</span>.dist( traj_i, traj_j)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> distances_and_indices.append((dij,j))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Now sort the distances of all points from point i. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  distances_and_indices.sort(key=<span style="color: #0000FF;">lambda</span> tup: tup[0]) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">http://tinyurl.com/mf8yz5b</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  distances.append( [ d   <span style="color: #0000FF;">for</span> ( d,  _ ) <span style="color: #0000FF;">in</span> distances_and_indices[0:k] ]  )
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  indices.append  ( [ idx <span style="color: #0000FF;">for</span> ( _, idx) <span style="color: #0000FF;">in</span> distances_and_indices[0:k] ]  )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Distance matrix is ", np.array(distances) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Index matrix is  "  , np.array(indices) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">'Finished Super-slow brute Force'</span> , <span style="color: #008000;">'white'</span>, <span style="color: #008000;">'on_green'</span>, [<span style="color: #008000;">'bold'</span>, <span style="color: #008000;">'underline'</span>])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">return</span> distances, indices

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">else</span>: <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">This means the table has already been computed or read in from a file in the constructor itself</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">'Calling  Memoized brute Force kNN'</span> , <span style="color: #008000;">'white'</span>, <span style="color: #008000;">'on_magenta'</span>, [<span style="color: #008000;">'bold'</span>])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">zipDistIdx = zip (self.nbrTable_dist, self.nbrTable_idx)</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print zipDistIdx[0][0:k]</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">distances</span> = [ [d   <span style="color: #0000FF;">for</span> d   <span style="color: #0000FF;">in</span> <span style="color: #0000FF;">self</span>.nbrTable_dist[i][0:k]] <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts)]        
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">indices</span>   = [ [idx <span style="color: #0000FF;">for</span> idx <span style="color: #0000FF;">in</span> <span style="color: #0000FF;">self</span>.nbrTable_idx[i][0:k] ] <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts)]        

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Distance matrix is ", np.array(distances) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Index matrix is  "  , np.array(indices) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">'Finished Memoized brute Force kNN'</span> , <span style="color: #008000;">'white'</span>, <span style="color: #008000;">'on_green'</span>, [<span style="color: #008000;">'bold'</span>, <span style="color: #008000;">'underline'</span>])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">return</span> distances, indices





<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">rangeSearch</span>(<span style="color: #0000FF;">self</span>, pointCloud, radius):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">""" A range search routine.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> Given a point-cloud, return the neighbours within a distance of 'radius'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> for every element of the pointcloud. return the neighbour indices , sorted </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> according to distance. """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">from</span> termcolor <span style="color: #0000FF;">import</span> colored 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">import</span> itertools <span style="color: #0000FF;">as</span> it
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">import</span> sys, time

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">"Inside trajectory rangeSearch"</span>,<span style="color: #008000;">'white'</span>, <span style="color: #008000;">'on_magenta'</span>,[<span style="color: #008000;">'bold'</span>])


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">numpts</span>              = <span style="color: #006FE0;">len</span>(pointCloud)


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">if</span> <span style="color: #0000FF;">self</span>.superSlowBruteForce:

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">distances</span>, <span style="color: #BA36A5;">indices</span> = ([], [])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">traj_i</span> = pointCloud[i]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">distances_and_indices</span> = []

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">for</span> j <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts):

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">traj_j</span> = pointCloud[j]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #BA36A5;">dij</span> = <span style="color: #0000FF;">self</span>.dist( traj_i, traj_j)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">if</span> dij &lt; radius: <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">We are doing range search </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       distances_and_indices.append((dij,j))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Now sort the distances of all points from point i. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    distances_and_indices.sort(key=<span style="color: #0000FF;">lambda</span> tup: tup[0]) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">http://tinyurl.com/mf8yz5b</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    distances.append([d   <span style="color: #0000FF;">for</span> (d, _ ) <span style="color: #0000FF;">in</span> distances_and_indices])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    indices.append  ([idx <span style="color: #0000FF;">for</span> (_,idx) <span style="color: #0000FF;">in</span> distances_and_indices])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Radius specified was ", colored(str(radius), 'white', 'on_green', ['bold'])</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Distance matrix is \n", np.array(distances) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Index matrix is  \n"  , np.array(indices) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">'Finished rangeSearch Neighbors'</span>, <span style="color: #008000;">'magenta'</span>, <span style="color: #008000;">'on_grey'</span>, [<span style="color: #008000;">'bold'</span>, <span style="color: #008000;">'underline'</span>])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">return</span> distances, indices

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">else</span>: <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">This means the table has already been computed or read in from a file in the constructor itself</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">'Calling  Memoized brute Force rangeSearch'</span> , <span style="color: #008000;">'yellow'</span>, <span style="color: #008000;">'on_magenta'</span>, [<span style="color: #008000;">'bold'</span>])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">start</span> = time.time()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">distances</span>, <span style="color: #BA36A5;">indices</span> = ([], [])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numpts):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">d_npbr</span>   = np.array(<span style="color: #0000FF;">self</span>.nbrTable_dist[i])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">idx_npbr</span> = np.array(<span style="color: #0000FF;">self</span>.nbrTable_idx[i], dtype=<span style="color: #006FE0;">int</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">distances_and_indices</span> = <span style="color: #006FE0;">zip</span> ( d_npbr, idx_npbr  )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#################################### </span><span style="color: #8D8D84; font-style: italic;">Bench</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">tmpd</span>   = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">tmpidx</span> = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">for</span> (d, idx) <span style="color: #0000FF;">in</span> distances_and_indices:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">if</span> d&lt;radius:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   tmpd.append(d)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   tmpidx.append(idx)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      distances.append(tmpd)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      indices.append(tmpidx)                

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">######################################### </span><span style="color: #8D8D84; font-style: italic;">Gold : But this compares distance twice </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">distances.append([d   for (d ,  _ ) in distances_and_indices if d&lt;radius ])  </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">indices.append  ([idx for (d , idx) in distances_and_indices if d&lt;radius ])</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">end</span> = time.time()       
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">print</span> <span style="color: #008000;">"Time taken for Range Search is "</span>, end-start
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Distance matrix is ", np.array(distances) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "Index matrix is  "  , np.array(indices) </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">print</span> colored(<span style="color: #008000;">'Finished Memoized brute Force rangeSearch'</span> , <span style="color: #008000;">'yellow'</span>, <span style="color: #008000;">'on_blue'</span>, [<span style="color: #008000;">'bold'</span>, <span style="color: #008000;">'underline'</span>])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">return</span> distances, indices

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">plotClusters</span>(<span style="color: #0000FF;">self</span>,  ax            , 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    trajThickness  = 10 , 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    marker         = <span style="color: #008000;">'o'</span> , 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    pointCloudInfo = <span style="color: #008000;">''</span>  ,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    annotatePoints = <span style="color: #D0372D;">False</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    plot_xytspace = <span style="color: #D0372D;">False</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #008000;">""" Plot the trajectory clusters computed by the algorithm."""</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">import</span> colorsys
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">import</span> itertools <span style="color: #0000FF;">as</span> it

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">trajectories</span> = <span style="color: #0000FF;">self</span>.pointCloud
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">numCars</span>      = <span style="color: #006FE0;">len</span>(trajectories)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">numClusters</span>  = <span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.computedClusterings)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Generate equidistant, hence maximally dispersed colors.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">colors</span>       = [(x*1.0/numClusters, 0.5, 0.5) <span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numClusters)]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #BA36A5;">colors</span>       = <span style="color: #006FE0;">map</span>(<span style="color: #0000FF;">lambda</span> x: colorsys.hsv_to_rgb(*x), colors)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #0000FF;">for</span> clusIdx, cluster <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">enumerate</span>(<span style="color: #0000FF;">self</span>.computedClusterings):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #BA36A5;">clusterColor</span> = colors[clusIdx]  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">np.random.rand(3,1)</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #0000FF;">for</span> carIdx <span style="color: #0000FF;">in</span> cluster:
                    <span style="color: #BA36A5;">xdata</span> = [point[0] <span style="color: #0000FF;">for</span> point <span style="color: #0000FF;">in</span> trajectories[carIdx]]
                    <span style="color: #BA36A5;">ydata</span> = [point[1] <span style="color: #0000FF;">for</span> point <span style="color: #0000FF;">in</span> trajectories[carIdx]]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">if plot is three d.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> plot_xytspace == <span style="color: #D0372D;">True</span>:

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">timeStamps</span> = np.linspace(0, 1, <span style="color: #006FE0;">len</span>(xdata))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print "TimeStamps are : ", timeStamps</span>
                       line, = ax.plot(xdata, ydata, timeStamps, marker=<span style="color: #008000;">'o'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>: <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">else if plot is 2d</span>
                       line, = ax.plot(xdata, ydata, <span style="color: #008000;">'o-'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">print</span> <span style="color: #006FE0;">type</span>(ax)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Every line in a cluster gets a unique color       </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   line.set_color(clusterColor)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   line.set_markeredgecolor(<span style="color: #008000;">'k'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       ax.set_title( <span style="color: #0000FF;">self</span>.algoName + <span style="color: #008000;">'\n r='</span> + <span style="color: #006FE0;">str</span>(<span style="color: #0000FF;">self</span>.r), fontdict={<span style="color: #008000;">'fontsize'</span>:20})
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       ax.set_xlabel(<span style="color: #008000;">'Latitude'</span>, fontdict={<span style="color: #008000;">'fontsize'</span>:15})
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       ax.set_ylabel(<span style="color: #008000;">'Longitude'</span>,fontdict={<span style="color: #008000;">'fontsize'</span>:15})


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">animateClusters</span>(<span style="color: #0000FF;">self</span>, ax, fig, lats, longs,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    interval_between_frame=200,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    lineTransparency   = 0.55,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    markerTransparency = 1.0,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    saveAnimation=<span style="color: #D0372D;">False</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #008000;">"""Instead of viewing the trajectories like a bowl of spaghetti, watch them </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      evolve in time. Each cluster gets assigned a unique color just like in plotClusters</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      interval_between_frames is in milliseconds.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">      """</span> 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">print</span> lats, longs
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">numCars</span>      = <span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.pointCloud)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">numClusters</span>  = <span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.computedClusterings)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">numSamples</span>   = <span style="color: #006FE0;">len</span>(<span style="color: #0000FF;">self</span>.pointCloud[0])

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Generate equidistant colors</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">colors</span>       = [(x*1.0/numClusters, 0.5, 0.5) <span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numClusters)]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">colors</span>       = <span style="color: #006FE0;">map</span>(<span style="color: #0000FF;">lambda</span> x: colorsys.hsv_to_rgb(*x), colors)


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">For each car create a trajectory object. </span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">trajectories</span> = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">for</span> clusIdx, cluster <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">enumerate</span>(<span style="color: #0000FF;">self</span>.computedClusterings):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">print</span> <span style="color: #008000;">"Setting line"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">linecolor</span> = colors[clusIdx]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">linecolor</span> = ( linecolor[0], linecolor[1], linecolor[2] , lineTransparency) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Augment with a transparency</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">markercolor</span> = (linecolor[0], linecolor[1], linecolor[2], markerTransparency)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">for</span> traj <span style="color: #0000FF;">in</span> cluster:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">print</span> <span style="color: #008000;">"---&lt; Line Set"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      line, = ax.plot([],[], lw=3, markerfacecolor=markercolor, markersize=5)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      line.set_marker(<span style="color: #008000;">'o'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      line.set_c(linecolor)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      trajectories.append(line)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">ax.set_title('r= ' + str(self.r) + + ' Clusters= ', str(numClusters), fontdict={'fontsize':40})</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      ax.set_xlabel(<span style="color: #008000;">'Latitude'</span>, fontdict={<span style="color: #008000;">'fontsize'</span>:20})
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      ax.set_ylabel(<span style="color: #008000;">'Longitude'</span>, fontdict={<span style="color: #008000;">'fontsize'</span>:20})

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">A special dumb initial function.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Absolutely essential if you do blitting</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">otherwise it will call the generator as an</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">initial function, leading to trouble</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">def</span> <span style="color: #006699;">init</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">global ax</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">print</span> <span style="color: #008000;">"Initializing "</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">return</span> ax.lines

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Update the state of rGather</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">def</span> <span style="color: #006699;">rGather</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #008000;">""" Run the online r-gather algorithm as the cars</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  move around. TODO: Make this function itself call</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  another generator which is revealing the data piece</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  by piece. Generators all the way down! Chaining of</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  several functions and lazy evaluation!!</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numSamples):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">for</span> car <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(numCars):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">xdata</span> = lats [0:i+1,car]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">ydata</span> = longs[0:i+1,car]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  trajectories[car].set_data( xdata, ydata )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">yield</span> trajectories, i


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Separating the animateData and the rGather generator function allows</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">def</span> <span style="color: #006699;">animateData</span>(state, fig, ax):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #008000;">""" Render the trajectories rendered by the rGather algorithms</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  and add fancy effects.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">       </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">trajectories</span> = state[0] <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">All trajectories</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">currentTime</span>  = state[1] <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">The time at which to animate</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">if</span> currentTime &gt; 1:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #0000FF;">for</span> car <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(<span style="color: #006FE0;">len</span>(trajectories)):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  trajectories[car].set_markevery(  (currentTime,currentTime)  )

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">return</span> trajectories

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Call the animator.  blit=True means only re-draw the parts that have changed.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Ensures better speed</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #BA36A5;">anim</span> = animation.FuncAnimation(fig, animateData, rGather(),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>       <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     init_func=init, interval=200, blit=<span style="color: #D0372D;">False</span>, fargs=(fig,ax))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">The draw commands are very important for the animation to be rednered.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      fig.canvas.draw()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      plt.show()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      anim.save(<span style="color: #008000;">'shenzen_show_scratch.mp4'</span>, fps=5, extra_args=[<span style="color: #008000;">'-vcodec'</span>, <span style="color: #008000;">'libx264'</span>]) ; <span style="color: #0000FF;">print</span> <span style="color: #008000;">"Animation saved"</span>
</pre>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: Gaurish</p>
<p class="date">Created: 2017-01-11 Wed 09:29</p>
<p class="creator"><a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.5.1 (<a href="http://orgmode.org">Org</a> mode 8.2.10)</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
